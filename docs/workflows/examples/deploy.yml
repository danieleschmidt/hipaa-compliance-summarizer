name: 🚀 Deploy HIPAA Summarizer

on:
  workflow_run:
    workflows: ["🏥 HIPAA CI/CD Pipeline"]
    types: [completed]
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      version:
        description: 'Version to deploy (default: latest)'
        required: false
        type: string
      skip_tests:
        description: 'Skip deployment tests'
        required: false
        type: boolean
        default: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Pre-deployment validation
  pre-deployment:
    name: 🔍 Pre-deployment Validation
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    outputs:
      deploy-staging: ${{ steps.deploy-decision.outputs.staging }}
      deploy-production: ${{ steps.deploy-decision.outputs.production }}
      image-tag: ${{ steps.image-info.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine deployment targets
        id: deploy-decision
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ github.event.inputs.environment }}" == "staging" ]]; then
              echo "staging=true" >> $GITHUB_OUTPUT
              echo "production=false" >> $GITHUB_OUTPUT
            else
              echo "staging=false" >> $GITHUB_OUTPUT
              echo "production=true" >> $GITHUB_OUTPUT
            fi
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "staging=true" >> $GITHUB_OUTPUT
            echo "production=false" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "staging=true" >> $GITHUB_OUTPUT
            echo "production=true" >> $GITHUB_OUTPUT
          else
            echo "staging=false" >> $GITHUB_OUTPUT
            echo "production=false" >> $GITHUB_OUTPUT
          fi

      - name: Determine image tag
        id: image-info
        run: |
          if [[ -n "${{ github.event.inputs.version }}" ]]; then
            echo "tag=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

      - name: Verify container image exists
        run: |
          IMAGE_REF="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.image-info.outputs.tag }}"
          echo "🔍 Verifying image exists: $IMAGE_REF"
          
          # Check if image exists in registry
          if ! docker manifest inspect "$IMAGE_REF" > /dev/null 2>&1; then
            echo "❌ Container image not found: $IMAGE_REF"
            exit 1
          fi
          echo "✅ Container image verified"

  # Deploy to staging environment
  deploy-staging:
    name: 🏗️ Deploy to Staging
    runs-on: ubuntu-latest
    needs: pre-deployment
    if: needs.pre-deployment.outputs.deploy-staging == 'true'
    environment:
      name: staging
      url: ${{ vars.STAGING_URL }}
    concurrency:
      group: staging-deployment
      cancel-in-progress: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Deploy to ECS
        run: |
          IMAGE_URI="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.pre-deployment.outputs.image-tag }}"
          
          echo "🚀 Deploying to staging environment..."
          echo "Image: $IMAGE_URI"
          
          # Update ECS service with new image
          aws ecs update-service \
            --cluster hipaa-staging-cluster \
            --service hipaa-summarizer-staging \
            --task-definition hipaa-summarizer-staging \
            --force-new-deployment
          
          # Wait for deployment to complete
          aws ecs wait services-stable \
            --cluster hipaa-staging-cluster \
            --services hipaa-summarizer-staging

      - name: Wait for service to be ready
        run: |
          echo "⏳ Waiting for service to be ready..."
          for i in {1..30}; do
            if curl -f "${{ vars.STAGING_URL }}/health" > /dev/null 2>&1; then
              echo "✅ Service is ready!"
              break
            fi
            echo "Attempt $i/30: Service not ready yet..."
            sleep 10
          done

      - name: Run deployment tests
        if: ${{ !github.event.inputs.skip_tests }}
        run: |
          echo "🧪 Running deployment tests..."
          
          # Health check
          curl -f "${{ vars.STAGING_URL }}/health" | jq .
          
          # Basic functionality test
          echo "Testing PHI detection endpoint..."
          curl -X POST "${{ vars.STAGING_URL }}/api/v1/detect-phi" \
            -H "Content-Type: application/json" \
            -d '{"text": "Patient: Test User, DOB: 01/01/1900"}' | jq .
          
          # Compliance check endpoint
          echo "Testing compliance endpoint..."
          curl -f "${{ vars.STAGING_URL }}/api/v1/compliance/status" | jq .

      - name: Update deployment status
        run: |
          echo "✅ Staging deployment completed successfully!"
          echo "🌐 Staging URL: ${{ vars.STAGING_URL }}"
          echo "📊 Monitoring: ${{ vars.MONITORING_DASHBOARD }}"

  # Deploy to production environment
  deploy-production:
    name: 🏭 Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-deployment, deploy-staging]
    if: needs.pre-deployment.outputs.deploy-production == 'true' && (success() || github.event_name == 'workflow_dispatch')
    environment:
      name: production
      url: ${{ vars.PRODUCTION_URL }}
    concurrency:
      group: production-deployment
      cancel-in-progress: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Create deployment record
        run: |
          echo "📝 Creating deployment record..."
          DEPLOYMENT_ID=$(date +%Y%m%d-%H%M%S)-${{ github.sha }}
          echo "DEPLOYMENT_ID=$DEPLOYMENT_ID" >> $GITHUB_ENV
          
          # Log deployment details for audit trail
          cat > deployment-record.json << EOF
          {
            "deployment_id": "$DEPLOYMENT_ID",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "environment": "production",
            "image": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.pre-deployment.outputs.image-tag }}",
            "git_sha": "${{ github.sha }}",
            "deployed_by": "${{ github.actor }}",
            "trigger": "${{ github.event_name }}"
          }
          EOF

      - name: Pre-production health check
        run: |
          echo "🔍 Running pre-production health checks..."
          
          # Check current production status
          if ! curl -f "${{ vars.PRODUCTION_URL }}/health" > /dev/null 2>&1; then
            echo "⚠️ Production service appears to be down"
          else
            echo "✅ Production service is currently healthy"
          fi

      - name: Deploy to production
        run: |
          IMAGE_URI="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.pre-deployment.outputs.image-tag }}"
          
          echo "🚀 Deploying to production environment..."
          echo "Image: $IMAGE_URI"
          echo "Deployment ID: ${{ env.DEPLOYMENT_ID }}"
          
          # Blue-green deployment strategy
          echo "🔄 Starting blue-green deployment..."
          
          # Update ECS service with new task definition
          aws ecs update-service \
            --cluster hipaa-production-cluster \
            --service hipaa-summarizer-production \
            --task-definition hipaa-summarizer-production \
            --deployment-configuration "minimumHealthyPercent=50,maximumPercent=200" \
            --force-new-deployment
          
          # Wait for deployment to complete
          echo "⏳ Waiting for deployment to stabilize..."
          aws ecs wait services-stable \
            --cluster hipaa-production-cluster \
            --services hipaa-summarizer-production \
            --max-attempts 30 \
            --delay 30

      - name: Post-deployment validation
        run: |
          echo "🔍 Running post-deployment validation..."
          
          # Wait for service to be fully ready
          for i in {1..20}; do
            if curl -f "${{ vars.PRODUCTION_URL }}/health" > /dev/null 2>&1; then
              echo "✅ Health check passed!"
              break
            fi
            echo "Attempt $i/20: Waiting for service..."
            sleep 15
          done
          
          # Comprehensive health check
          HEALTH_RESPONSE=$(curl -s "${{ vars.PRODUCTION_URL }}/health")
          echo "Health response: $HEALTH_RESPONSE"
          
          # Validate critical endpoints
          echo "🧪 Validating critical endpoints..."
          
          # PHI detection endpoint
          PHI_RESPONSE=$(curl -s -X POST "${{ vars.PRODUCTION_URL }}/api/v1/detect-phi" \
            -H "Content-Type: application/json" \
            -d '{"text": "Test patient data"}')
          echo "PHI detection test: $PHI_RESPONSE"
          
          # Compliance status
          COMPLIANCE_RESPONSE=$(curl -s "${{ vars.PRODUCTION_URL }}/api/v1/compliance/status")
          echo "Compliance status: $COMPLIANCE_RESPONSE"

      - name: Update monitoring and alerting
        run: |
          echo "📊 Updating monitoring configuration..."
          
          # Update deployment version in monitoring
          curl -X POST "${{ vars.MONITORING_DASHBOARD }}/api/annotations" \
            -H "Content-Type: application/json" \
            -d '{
              "text": "Production deployment: ${{ env.DEPLOYMENT_ID }}",
              "tags": ["deployment", "production"],
              "time": '$(date +%s000)'
            }' || echo "⚠️ Failed to update monitoring"

      - name: Run production smoke tests
        if: ${{ !github.event.inputs.skip_tests }}
        run: |
          echo "🧪 Running production smoke tests..."
          
          # Test core functionality
          echo "Testing core HIPAA compliance functionality..."
          
          # Performance test
          echo "Running performance verification..."
          RESPONSE_TIME=$(curl -o /dev/null -s -w '%{time_total}' "${{ vars.PRODUCTION_URL }}/health")
          if (( $(echo "$RESPONSE_TIME > 5.0" | bc -l) )); then
            echo "⚠️ Response time is slower than expected: ${RESPONSE_TIME}s"
          else
            echo "✅ Response time is acceptable: ${RESPONSE_TIME}s"
          fi
          
          # Security headers check
          echo "Verifying security headers..."
          SECURITY_HEADERS=$(curl -I "${{ vars.PRODUCTION_URL }}/health" 2>/dev/null | grep -i "x-\|strict\|content-security")
          echo "Security headers: $SECURITY_HEADERS"

      - name: Deployment success notification
        run: |
          echo "✅ Production deployment completed successfully!"
          echo ""
          echo "🎉 Deployment Summary:"
          echo "- Environment: Production"
          echo "- Deployment ID: ${{ env.DEPLOYMENT_ID }}"
          echo "- Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.pre-deployment.outputs.image-tag }}"
          echo "- URL: ${{ vars.PRODUCTION_URL }}"
          echo "- Monitoring: ${{ vars.MONITORING_DASHBOARD }}"
          echo ""
          echo "📋 Post-deployment checklist:"
          echo "- [ ] Monitor application metrics for 30 minutes"
          echo "- [ ] Verify user acceptance testing"
          echo "- [ ] Update change management documentation"
          echo "- [ ] Notify stakeholders of successful deployment"

  # Rollback job (manual trigger)
  rollback:
    name: 🔄 Rollback Deployment
    runs-on: ubuntu-latest
    if: failure() && (needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure')
    environment:
      name: ${{ needs.deploy-staging.result == 'failure' && 'staging' || 'production' }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Rollback deployment
        run: |
          ENV_NAME=${{ needs.deploy-staging.result == 'failure' && 'staging' || 'production' }}
          CLUSTER_NAME="hipaa-${ENV_NAME}-cluster"
          SERVICE_NAME="hipaa-summarizer-${ENV_NAME}"
          
          echo "🔄 Rolling back $ENV_NAME deployment..."
          
          # Rollback to previous task definition
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $SERVICE_NAME \
            --force-new-deployment
          
          # Wait for rollback to complete
          aws ecs wait services-stable \
            --cluster $CLUSTER_NAME \
            --services $SERVICE_NAME

      - name: Verify rollback
        run: |
          ENV_URL=${{ needs.deploy-staging.result == 'failure' && vars.STAGING_URL || vars.PRODUCTION_URL }}
          
          echo "🔍 Verifying rollback..."
          for i in {1..10}; do
            if curl -f "$ENV_URL/health" > /dev/null 2>&1; then
              echo "✅ Rollback successful - service is healthy"
              break
            fi
            echo "Attempt $i/10: Waiting for service after rollback..."
            sleep 10
          done

  # Deployment summary
  deployment-summary:
    name: 📋 Deployment Summary
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Create deployment summary
        run: |
          echo "# 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Results" >> $GITHUB_STEP_SUMMARY
          echo "- 🏗️ Staging: ${{ needs.deploy-staging.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🏭 Production: ${{ needs.deploy-production.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Environment URLs" >> $GITHUB_STEP_SUMMARY
          echo "- 🏗️ Staging: ${{ vars.STAGING_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🏭 Production: ${{ vars.PRODUCTION_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 Monitoring: ${{ vars.MONITORING_DASHBOARD }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
            echo "✅ **Status**: Production deployment successful!" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.deploy-staging.result }}" == "success" ]]; then
            echo "⚠️ **Status**: Staging deployment successful, production pending" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Status**: Deployment failed" >> $GITHUB_STEP_SUMMARY
          fi