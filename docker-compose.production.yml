version: '3.8'

services:
  # HIPAA Compliance API Gateway
  hipaa-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hipaa-compliance-api
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - HIPAA_CONFIG_PATH=/app/config/hipaa_config.yml
      - DATABASE_URL=postgresql://hipaa_user:${DB_PASSWORD}@postgres:5432/hipaa_compliance
      - REDIS_URL=redis://redis:6379/0
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - LOG_LEVEL=INFO
    volumes:
      - ./config:/app/config:ro
      - hipaa_logs:/app/logs
      - hipaa_uploads:/app/uploads
    networks:
      - hipaa_network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: hipaa-postgres
    environment:
      - POSTGRES_DB=hipaa_compliance
      - POSTGRES_USER=hipaa_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - hipaa_postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - hipaa_network
    ports:
      - "5432:5432"
    command: >
      postgres
      -c ssl=on
      -c ssl_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem
      -c ssl_key_file=/etc/ssl/private/ssl-cert-snakeoil.key
      -c log_statement=all
      -c log_destination=stderr
      -c log_min_duration_statement=1000
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hipaa_user -d hipaa_compliance"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: hipaa-redis
    ports:
      - "6379:6379"
    volumes:
      - hipaa_redis_data:/data
      - ./config/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - hipaa_network
    command: redis-server /etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.24-alpine
    container_name: hipaa-nginx
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - hipaa_logs:/var/log/nginx
    networks:
      - hipaa_network
    depends_on:
      - hipaa-api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: hipaa-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./observability/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - hipaa_prometheus_data:/prometheus
    networks:
      - hipaa_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    restart: unless-stopped

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: hipaa-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=https://grafana.hipaa-compliance.local
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_STRICT_TRANSPORT_SECURITY=true
    volumes:
      - hipaa_grafana_data:/var/lib/grafana
      - ./observability/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./observability/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - hipaa_network
    depends_on:
      - prometheus
    restart: unless-stopped

  # Log Aggregation - ELK Stack
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: hipaa-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - hipaa_elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - hipaa_network
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: hipaa-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
    networks:
      - hipaa_network
    depends_on:
      - elasticsearch
    restart: unless-stopped

  # Backup Service
  backup:
    build:
      context: .
      dockerfile: Dockerfile.backup
    container_name: hipaa-backup
    environment:
      - BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
      - S3_BUCKET=${BACKUP_S3_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - DB_URL=postgresql://hipaa_user:${DB_PASSWORD}@postgres:5432/hipaa_compliance
    volumes:
      - hipaa_postgres_data:/data/postgres:ro
      - hipaa_uploads:/data/uploads:ro
      - hipaa_logs:/data/logs:ro
    networks:
      - hipaa_network
    depends_on:
      - postgres
    restart: unless-stopped

# Persistent Volumes
volumes:
  hipaa_postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR}/postgres
  hipaa_redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR}/redis
  hipaa_uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR}/uploads
  hipaa_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR}/logs
  hipaa_prometheus_data:
    driver: local
  hipaa_grafana_data:
    driver: local
  hipaa_elasticsearch_data:
    driver: local

# Networks
networks:
  hipaa_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16