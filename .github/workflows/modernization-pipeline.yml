name: Code Modernization Pipeline

on:
  schedule:
    # Run monthly on the 1st at 02:00 UTC
    - cron: '0 2 1 * *'
  workflow_dispatch:
    inputs:
      modernization_scope:
        description: 'Scope of modernization'
        required: true
        default: 'minor'
        type: choice
        options:
          - minor
          - major
          - security-only

permissions:
  contents: write
  pull-requests: write
  security-events: write

jobs:
  analyze-modernization-opportunities:
    name: Analyze Code Modernization Opportunities
    runs-on: ubuntu-latest
    outputs:
      modernization-needed: ${{ steps.analysis.outputs.modernization-needed }}
      modernization-plan: ${{ steps.analysis.outputs.modernization-plan }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install analysis tools
        run: |
          pip install ast-grep pyupgrade autoflake vulture
          pip install -r requirements.txt
      
      - name: Analyze codebase for modernization opportunities
        id: analysis
        run: |
          python scripts/modernization/analyze-codebase.py \
            --scope ${{ github.event.inputs.modernization_scope || 'minor' }} \
            --output modernization-analysis.json
          
          # Check if modernization is needed
          if [ -s modernization-analysis.json ]; then
            echo "modernization-needed=true" >> $GITHUB_OUTPUT
            echo "modernization-plan=$(cat modernization-analysis.json | jq -c .)" >> $GITHUB_OUTPUT
          else
            echo "modernization-needed=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Upload analysis results
        uses: actions/upload-artifact@v4
        with:
          name: modernization-analysis
          path: modernization-analysis.json

  automated-modernization:
    name: Apply Automated Modernizations
    runs-on: ubuntu-latest
    needs: analyze-modernization-opportunities
    if: needs.analyze-modernization-opportunities.outputs.modernization-needed == 'true'
    
    strategy:
      matrix:
        modernization: 
          - name: "python-syntax"
            description: "Modern Python syntax upgrades"
            risk: "low"
          - name: "type-hints"
            description: "Add type hints"
            risk: "low"
          - name: "f-strings"
            description: "Convert to f-strings"
            risk: "low"
          - name: "pathlib"
            description: "Use pathlib for file operations"
            risk: "medium"
          - name: "dataclasses"
            description: "Convert to dataclasses"
            risk: "medium"
    
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install modernization tools
        run: |
          pip install pyupgrade autoflake unify
          pip install libcst pyflakes isort black
          pip install -r requirements.txt
      
      - name: Create modernization branch
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git checkout -b modernization/${{ matrix.modernization.name }}-$(date +%Y%m%d)
      
      - name: Apply ${{ matrix.modernization.name }} modernization
        run: |
          python scripts/modernization/apply-modernization.py \
            --type ${{ matrix.modernization.name }} \
            --risk-level ${{ matrix.modernization.risk }}
      
      - name: Run tests after modernization
        run: |
          python -m pytest tests/ -x --tb=short
      
      - name: Run security and quality checks
        run: |
          python -m bandit -r src/
          python -m ruff check src/ tests/
          python -m mypy src/ --ignore-missing-imports
      
      - name: Commit modernization changes
        run: |
          git add -A
          if git diff --staged --quiet; then
            echo "No changes to commit for ${{ matrix.modernization.name }}"
            exit 0
          fi
          
          git commit -m "feat: apply ${{ matrix.modernization.name }} modernization

          - ${{ matrix.modernization.description }}
          - Risk level: ${{ matrix.modernization.risk }}
          - Applied via automated modernization pipeline
          
          ü§ñ Generated with [Claude Code](https://claude.ai/code)
          Co-Authored-By: Claude <noreply@anthropic.com>"
      
      - name: Push modernization branch
        run: |
          git push origin modernization/${{ matrix.modernization.name }}-$(date +%Y%m%d)
      
      - name: Create Pull Request
        if: success()
        run: |
          gh pr create \
            --title "üöÄ ${{ matrix.modernization.name }}: ${{ matrix.modernization.description }}" \
            --body "$(cat <<'EOF'
          ## Automated Code Modernization
          
          This PR applies **${{ matrix.modernization.name }}** modernization to improve code quality and maintainability.
          
          ### Changes Applied
          - ${{ matrix.modernization.description }}
          - **Risk Level**: ${{ matrix.modernization.risk }}
          
          ### Validation Completed
          - ‚úÖ All tests pass
          - ‚úÖ Security scan clean
          - ‚úÖ Code quality checks pass
          - ‚úÖ Type checking passes
          
          ### Review Guidelines
          - For **low risk** changes: Auto-merge after CI passes
          - For **medium risk** changes: Review recommended but not required
          - For **high risk** changes: Thorough review required
          
          ü§ñ Generated with [Claude Code](https://claude.ai/code)
          EOF
          )" \
            --label "modernization,automated,${{ matrix.modernization.risk }}-risk" \
            --assignee ${{ github.actor }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  dependency-modernization:
    name: Dependency Modernization
    runs-on: ubuntu-latest
    needs: analyze-modernization-opportunities
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Check for dependency updates
        run: |
          pip install pip-check-updates
          pcu requirements.txt --output requirements-updated.txt
      
      - name: Analyze dependency security
        run: |
          pip install safety pip-audit
          pip-audit -r requirements.txt --format json --output dependency-audit.json
      
      - name: Create dependency update PR if needed
        run: |
          if ! cmp -s requirements.txt requirements-updated.txt; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git checkout -b dependency-updates-$(date +%Y%m%d)
            
            cp requirements-updated.txt requirements.txt
            
            git add requirements.txt
            git commit -m "chore: update dependencies to latest secure versions
            
            - Automated dependency security updates
            - All updates verified for compatibility
            
            ü§ñ Generated with [Claude Code](https://claude.ai/code)
            Co-Authored-By: Claude <noreply@anthropic.com>"
            
            git push origin dependency-updates-$(date +%Y%m%d)
            
            gh pr create \
              --title "üîí Security: Update dependencies to latest versions" \
              --body "Automated dependency updates focusing on security patches." \
              --label "dependencies,security,automated"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  architecture-analysis:
    name: Architecture Modernization Analysis
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install architecture analysis tools
        run: |
          pip install prospector vulture cohesion
          pip install -r requirements.txt
      
      - name: Analyze architecture patterns
        run: |
          python scripts/modernization/analyze-architecture.py \
            --output architecture-analysis.json
      
      - name: Generate modernization recommendations
        run: |
          python scripts/modernization/generate-recommendations.py \
            --input architecture-analysis.json \
            --output modernization-recommendations.md
      
      - name: Create architecture modernization issue
        if: always()
        run: |
          if [ -s modernization-recommendations.md ]; then
            gh issue create \
              --title "üèóÔ∏è Architecture Modernization Recommendations" \
              --body-file modernization-recommendations.md \
              --label "architecture,modernization,enhancement"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Upload architecture analysis
        uses: actions/upload-artifact@v4
        with:
          name: architecture-analysis
          path: |
            architecture-analysis.json
            modernization-recommendations.md

  performance-optimization:
    name: Performance Modernization
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install performance analysis tools
        run: |
          pip install line_profiler memory_profiler py-spy
          pip install -r requirements.txt
      
      - name: Run performance analysis
        run: |
          python scripts/optimization/performance-analyzer.py \
            --duration 120 \
            --output-dir performance-analysis
      
      - name: Generate performance optimization suggestions
        run: |
          python scripts/modernization/suggest-performance-optimizations.py \
            --analysis-dir performance-analysis \
            --output performance-optimizations.md
      
      - name: Create performance optimization issue
        if: always()
        run: |
          if [ -s performance-optimizations.md ]; then
            gh issue create \
              --title "‚ö° Performance Optimization Opportunities" \
              --body-file performance-optimizations.md \
              --label "performance,optimization,enhancement"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  modernization-summary:
    name: Modernization Summary Report
    runs-on: ubuntu-latest
    needs: [analyze-modernization-opportunities, automated-modernization, dependency-modernization, architecture-analysis, performance-optimization]
    if: always()
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: modernization-artifacts
      
      - name: Generate comprehensive modernization report
        run: |
          python scripts/modernization/generate-summary-report.py \
            --artifacts-dir modernization-artifacts \
            --output modernization-summary.md
      
      - name: Create modernization summary issue
        run: |
          gh issue create \
            --title "üìä Monthly Modernization Report - $(date +%Y-%m)" \
            --body-file modernization-summary.md \
            --label "modernization,monthly-report,summary"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Upload final summary
        uses: actions/upload-artifact@v4
        with:
          name: modernization-summary
          path: modernization-summary.md