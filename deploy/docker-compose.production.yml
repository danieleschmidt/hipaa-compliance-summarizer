version: '3.8'

services:
  hipaa-api:
    build:
      context: ..
      dockerfile: Dockerfile
    container_name: hipaa-compliance-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - HIPAA_CONFIG_PATH=/app/config/hipaa_config.yml
      - LOG_LEVEL=INFO
      - WORKERS=4
      - MAX_WORKERS=10
      - ENABLE_AUTO_SCALING=true
      - ENABLE_PERFORMANCE_MONITORING=true
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://hipaa_user:${DB_PASSWORD}@postgres:5432/hipaa_db
    volumes:
      - ../config:/app/config:ro
      - hipaa-logs:/app/logs
      - hipaa-data:/app/data
    depends_on:
      - postgres
      - redis
    networks:
      - hipaa-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  hipaa-worker:
    build:
      context: ..
      dockerfile: Dockerfile
    container_name: hipaa-compliance-worker
    restart: unless-stopped
    command: ["python", "-m", "hipaa_compliance_summarizer.workers.document_processor_worker"]
    environment:
      - ENVIRONMENT=production
      - HIPAA_CONFIG_PATH=/app/config/hipaa_config.yml
      - LOG_LEVEL=INFO
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://hipaa_user:${DB_PASSWORD}@postgres:5432/hipaa_db
      - WORKER_CONCURRENCY=4
    volumes:
      - ../config:/app/config:ro
      - hipaa-logs:/app/logs
      - hipaa-data:/app/data
    depends_on:
      - postgres
      - redis
    networks:
      - hipaa-network
    deploy:
      replicas: 2

  postgres:
    image: postgres:15-alpine
    container_name: hipaa-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=hipaa_db
      - POSTGRES_USER=hipaa_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ../scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - hipaa-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hipaa_user -d hipaa_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: hipaa-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    networks:
      - hipaa-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:alpine
    container_name: hipaa-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - hipaa-logs:/var/log/nginx
    depends_on:
      - hipaa-api
    networks:
      - hipaa-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  prometheus:
    image: prom/prometheus:latest
    container_name: hipaa-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - hipaa-network

  grafana:
    image: grafana/grafana:latest
    container_name: hipaa-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ../observability/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - hipaa-network

  filebeat:
    image: docker.elastic.co/beats/filebeat:7.15.0
    container_name: hipaa-filebeat
    restart: unless-stopped
    user: root
    volumes:
      - ./filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - hipaa-logs:/var/log/hipaa:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - ELASTICSEARCH_HOSTS=${ELASTICSEARCH_HOSTS:-elasticsearch:9200}
    networks:
      - hipaa-network
    depends_on:
      - hipaa-api

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  hipaa-logs:
    driver: local
  hipaa-data:
    driver: local

networks:
  hipaa-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16